/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ArchetypePayoutsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveWithdrawal"
      | "balance"
      | "balanceToken"
      | "isApproved"
      | "updateBalances"
      | "withdraw"
      | "withdrawFrom"
      | "withdrawTokens"
      | "withdrawTokensFrom"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FundsAdded" | "Withdrawal"): EventFragment;

  encodeFunctionData(
    functionFragment: "approveWithdrawal",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "balance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBalances",
    values: [BigNumberish, AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFrom",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokensFrom",
    values: [AddressLike, AddressLike, AddressLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokensFrom",
    data: BytesLike
  ): Result;
}

export namespace FundsAddedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [recipient: string, token: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    src: AddressLike,
    token: AddressLike,
    wad: BigNumberish
  ];
  export type OutputTuple = [src: string, token: string, wad: bigint];
  export interface OutputObject {
    src: string;
    token: string;
    wad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArchetypePayouts extends BaseContract {
  connect(runner?: ContractRunner | null): ArchetypePayouts;
  waitForDeployment(): Promise<this>;

  interface: ArchetypePayoutsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveWithdrawal: TypedContractMethod<
    [delegate: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  balance: TypedContractMethod<[recipient: AddressLike], [bigint], "view">;

  balanceToken: TypedContractMethod<
    [recipient: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  isApproved: TypedContractMethod<
    [from: AddressLike, delegate: AddressLike],
    [boolean],
    "view"
  >;

  updateBalances: TypedContractMethod<
    [
      totalAmount: BigNumberish,
      token: AddressLike,
      recipients: AddressLike[],
      splits: BigNumberish[]
    ],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  withdrawFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawTokens: TypedContractMethod<
    [tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  withdrawTokensFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveWithdrawal"
  ): TypedContractMethod<
    [delegate: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balance"
  ): TypedContractMethod<[recipient: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceToken"
  ): TypedContractMethod<
    [recipient: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApproved"
  ): TypedContractMethod<
    [from: AddressLike, delegate: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateBalances"
  ): TypedContractMethod<
    [
      totalAmount: BigNumberish,
      token: AddressLike,
      recipients: AddressLike[],
      splits: BigNumberish[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<[tokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTokensFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FundsAdded"
  ): TypedContractEvent<
    FundsAddedEvent.InputTuple,
    FundsAddedEvent.OutputTuple,
    FundsAddedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "FundsAdded(address,address,uint256)": TypedContractEvent<
      FundsAddedEvent.InputTuple,
      FundsAddedEvent.OutputTuple,
      FundsAddedEvent.OutputObject
    >;
    FundsAdded: TypedContractEvent<
      FundsAddedEvent.InputTuple,
      FundsAddedEvent.OutputTuple,
      FundsAddedEvent.OutputObject
    >;

    "Withdrawal(address,address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
