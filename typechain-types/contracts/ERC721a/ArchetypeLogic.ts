/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type AuthStruct = { key: BytesLike; proof: BytesLike[] };

export type AuthStructOutput = [key: string, proof: string[]] & {
  key: string;
  proof: string[];
};

export interface ArchetypeLogicInterface extends Interface {
  getFunction(
    nameOrSignature: "validateAffiliate" | "verify"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BurnInvited"
      | "Invited"
      | "Referral"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "validateAffiliate",
    values: [AddressLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [AuthStruct, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "validateAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export namespace BurnInvitedEvent {
  export type InputTuple = [key: BytesLike, cid: BytesLike];
  export type OutputTuple = [key: string, cid: string];
  export interface OutputObject {
    key: string;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvitedEvent {
  export type InputTuple = [key: BytesLike, cid: BytesLike];
  export type OutputTuple = [key: string, cid: string];
  export interface OutputObject {
    key: string;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralEvent {
  export type InputTuple = [
    affiliate: AddressLike,
    token: AddressLike,
    wad: BigNumberish,
    numMints: BigNumberish
  ];
  export type OutputTuple = [
    affiliate: string,
    token: string,
    wad: bigint,
    numMints: bigint
  ];
  export interface OutputObject {
    affiliate: string;
    token: string;
    wad: bigint;
    numMints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    src: AddressLike,
    token: AddressLike,
    wad: BigNumberish
  ];
  export type OutputTuple = [src: string, token: string, wad: bigint];
  export interface OutputObject {
    src: string;
    token: string;
    wad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArchetypeLogic extends BaseContract {
  connect(runner?: ContractRunner | null): ArchetypeLogic;
  waitForDeployment(): Promise<this>;

  interface: ArchetypeLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  validateAffiliate: TypedContractMethod<
    [
      affiliate: AddressLike,
      signature: BytesLike,
      affiliateSigner: AddressLike
    ],
    [void],
    "view"
  >;

  verify: TypedContractMethod<
    [auth: AuthStruct, tokenAddress: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "validateAffiliate"
  ): TypedContractMethod<
    [
      affiliate: AddressLike,
      signature: BytesLike,
      affiliateSigner: AddressLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [auth: AuthStruct, tokenAddress: AddressLike, account: AddressLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "BurnInvited"
  ): TypedContractEvent<
    BurnInvitedEvent.InputTuple,
    BurnInvitedEvent.OutputTuple,
    BurnInvitedEvent.OutputObject
  >;
  getEvent(
    key: "Invited"
  ): TypedContractEvent<
    InvitedEvent.InputTuple,
    InvitedEvent.OutputTuple,
    InvitedEvent.OutputObject
  >;
  getEvent(
    key: "Referral"
  ): TypedContractEvent<
    ReferralEvent.InputTuple,
    ReferralEvent.OutputTuple,
    ReferralEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "BurnInvited(bytes32,bytes32)": TypedContractEvent<
      BurnInvitedEvent.InputTuple,
      BurnInvitedEvent.OutputTuple,
      BurnInvitedEvent.OutputObject
    >;
    BurnInvited: TypedContractEvent<
      BurnInvitedEvent.InputTuple,
      BurnInvitedEvent.OutputTuple,
      BurnInvitedEvent.OutputObject
    >;

    "Invited(bytes32,bytes32)": TypedContractEvent<
      InvitedEvent.InputTuple,
      InvitedEvent.OutputTuple,
      InvitedEvent.OutputObject
    >;
    Invited: TypedContractEvent<
      InvitedEvent.InputTuple,
      InvitedEvent.OutputTuple,
      InvitedEvent.OutputObject
    >;

    "Referral(address,address,uint128,uint256)": TypedContractEvent<
      ReferralEvent.InputTuple,
      ReferralEvent.OutputTuple,
      ReferralEvent.OutputObject
    >;
    Referral: TypedContractEvent<
      ReferralEvent.InputTuple,
      ReferralEvent.OutputTuple,
      ReferralEvent.OutputObject
    >;

    "Withdrawal(address,address,uint128)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
