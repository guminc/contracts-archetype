/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type MintTierStruct = {
  numMints: BigNumberish;
  mintDiscount: BigNumberish;
};

export type MintTierStructOutput = [numMints: bigint, mintDiscount: bigint] & {
  numMints: bigint;
  mintDiscount: bigint;
};

export type DiscountStruct = {
  affiliateDiscount: BigNumberish;
  mintTiers: MintTierStruct[];
};

export type DiscountStructOutput = [
  affiliateDiscount: bigint,
  mintTiers: MintTierStructOutput[]
] & { affiliateDiscount: bigint; mintTiers: MintTierStructOutput[] };

export type ConfigStruct = {
  baseUri: string;
  affiliateSigner: AddressLike;
  maxSupply: BigNumberish;
  maxBatchSize: BigNumberish;
  affiliateFee: BigNumberish;
  defaultRoyalty: BigNumberish;
  discounts: DiscountStruct;
};

export type ConfigStructOutput = [
  baseUri: string,
  affiliateSigner: string,
  maxSupply: bigint,
  maxBatchSize: bigint,
  affiliateFee: bigint,
  defaultRoyalty: bigint,
  discounts: DiscountStructOutput
] & {
  baseUri: string;
  affiliateSigner: string;
  maxSupply: bigint;
  maxBatchSize: bigint;
  affiliateFee: bigint;
  defaultRoyalty: bigint;
  discounts: DiscountStructOutput;
};

export type PayoutConfigStruct = {
  ownerBps: BigNumberish;
  platformBps: BigNumberish;
  partnerBps: BigNumberish;
  superAffiliateBps: BigNumberish;
  partner: AddressLike;
  superAffiliate: AddressLike;
  ownerAltPayout: AddressLike;
};

export type PayoutConfigStructOutput = [
  ownerBps: bigint,
  platformBps: bigint,
  partnerBps: bigint,
  superAffiliateBps: bigint,
  partner: string,
  superAffiliate: string,
  ownerAltPayout: string
] & {
  ownerBps: bigint;
  platformBps: bigint;
  partnerBps: bigint;
  superAffiliateBps: bigint;
  partner: string;
  superAffiliate: string;
  ownerAltPayout: string;
};

export interface FactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "archetype"
      | "createCollection"
      | "owner"
      | "renounceOwnership"
      | "setArchetype"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CollectionAdded" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "archetype", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [AddressLike, string, string, ConfigStruct, PayoutConfigStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setArchetype",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "archetype", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArchetype",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CollectionAddedEvent {
  export type InputTuple = [
    sender: AddressLike,
    receiver: AddressLike,
    collection: AddressLike
  ];
  export type OutputTuple = [
    sender: string,
    receiver: string,
    collection: string
  ];
  export interface OutputObject {
    sender: string;
    receiver: string;
    collection: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Factory extends BaseContract {
  connect(runner?: ContractRunner | null): Factory;
  waitForDeployment(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  archetype: TypedContractMethod<[], [string], "view">;

  createCollection: TypedContractMethod<
    [
      _receiver: AddressLike,
      name: string,
      symbol: string,
      config: ConfigStruct,
      payoutConfig: PayoutConfigStruct
    ],
    [string],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setArchetype: TypedContractMethod<
    [archetype_: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "archetype"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createCollection"
  ): TypedContractMethod<
    [
      _receiver: AddressLike,
      name: string,
      symbol: string,
      config: ConfigStruct,
      payoutConfig: PayoutConfigStruct
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setArchetype"
  ): TypedContractMethod<[archetype_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CollectionAdded"
  ): TypedContractEvent<
    CollectionAddedEvent.InputTuple,
    CollectionAddedEvent.OutputTuple,
    CollectionAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CollectionAdded(address,address,address)": TypedContractEvent<
      CollectionAddedEvent.InputTuple,
      CollectionAddedEvent.OutputTuple,
      CollectionAddedEvent.OutputObject
    >;
    CollectionAdded: TypedContractEvent<
      CollectionAddedEvent.InputTuple,
      CollectionAddedEvent.OutputTuple,
      CollectionAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
